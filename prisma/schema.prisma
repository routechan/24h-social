// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    String @id @default(uuid())
  email   String   @unique
  name    String 
  posts   Post[]
  replies Reply[]
  profile Profile?
  likes Like[]
}

model Post{
id Int  @id @default(autoincrement())
content String
createdAt DateTime @default(now())
userId String 
replies Reply[]
user User @relation(fields:[userId],references:[id],onDelete:Cascade)
likes Like[]
}

model Reply{
  id Int @id @default(autoincrement())
  content String
  userId String
  postId Int
  user User @relation(fields:[userId],references:[id],onDelete:Cascade)
  post Post @relation(fields:[postId],references:[id],onDelete:Cascade)
  createdAt DateTime @default(now())
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  userId    String @unique
  user      User    @relation(fields: [userId], references: [id],onDelete:Cascade)
}

model Like {
  id Int     @id @default(autoincrement())
  userId String 
  postId  Int

 user User @relation(fields:[userId], references:[id], onDelete: Cascade)
post Post @relation(fields:[postId], references:[id], onDelete: Cascade)


  @@unique([userId,postId])
}